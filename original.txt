import { dbFirestore } from "https://forio-source.github.io/foricon-firebase/script.js";
import {
  doc,
  getDoc,
} from "https://www.gstatic.com/firebasejs/10.9.0/firebase-firestore.js";

const gfi = document.getElementById("getForiconIcon");
const u = gfi.getAttribute("src").split("#");

if (!gfi) {
  console.error('Element with "getForiconIcon" id is undefined');
}
else if (gfi.nodeName != "SCRIPT") {
  console.error('Element with "getForiconIcon" id is not <script>');
}
else if (u.length != 2) {
  console.error("Invalid src's value");
}
else {
  gfi.remove();
  customElements.define("f-icon", class extends HTMLElement {
    getIcon() {
      return this.getAttribute("icon");
    }
    setIcon(iconName) {
      this.setAttribute("icon", iconName);
    }
    toggleIcon(icon1Name, icon2Name) {
      this.getAttribute("icon") == icon1Name ? this.setAttribute("icon", icon2Name) : this.setAttribute("icon", icon1Name);
    }
    getType() {
      return ts[0];
    }
    setTyPe(typeName) {
      this.setAttribute("type", `${typeName}/${this.getAttribute("type").split("/")[1]}`);
    }
    toggleType(type1Name, type2Name) {
      const valid = ["regular", "duotone", "sharp"];
      if (!valid.some(i => i == type1Name) || !valid.some(i => i == type2Name)) {
        console.error("Invalid type name");
      }
      else {
        if (this.getAttribute("type").split("/")[0] == type1Name) {
          this.setAttribute("type", `${type2Name}/${this.getAttribute("type").split("/")[1]}`);
        }
        else {
          this.setAttribute("type", `${type2Name}/${this.getAttribute("type").split("/")[1]}`);
        };
      };
    }
    getStyle() {
      return this.getAttribute("type").split("/")[1];
    }
    setStyle(styleName) {
      this.setAttribute("type", `${this.getAttribute("type").split("/")[0]}/${styleName}`);
    }
    toggleStyle() {
      if (this.getAttribute("type").split("/")[1] == "filled") {
        this.setAttribute("type", `${this.getAttribute("type").split("/")[0]}/outlined`);
        this.getAttribute("type").split("/")[1] = "outlined";
      }
      else {
        this.setAttribute("type", `${this.getAttribute("type").split("/")[0]}/filled`);
        this.getAttribute("type").split("/")[1] = "filled";
      };
    }
  });
  async function a() {
    const docs = await getDoc(doc(dbFirestore, "users", u[1]));
    if (docs.exists()) {
      const xhr = new XMLHttpRequest();
      xhr.open(
        "GET",
        "https://forio-source.github.io/nju199AHr81/73h9ER4juz85.txt",
        !0
      );
      xhr.onreadystatechange = () => {
        if (xhr.readyState == 4 && xhr.status == 200) {
          let s = document.createElement("style");
          s.innerHTML = xhr.responseText;
          document.querySelector("head").appendChild(s);
        }
      };
      do {
        xhr.send();
      } while (xhr.readyState != 4 && xhr.status != 200);
    }
    else {
      console.error("Given account id is invalid")
    }
  }
  a();
}